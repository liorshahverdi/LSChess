package chess;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import chess.Board.ChessPiece;

public class GUI extends JLayeredPane {
    public static final int WIDTH = 1080;
    public static final int HEIGHT = 780;
    private static final int GRID_ROWS = 8;
    private static final int GRID_COLS = 8;
    private static final int GAP = 3;
    private static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT);
    private static final Dimension LABEL_SIZE = new Dimension(60, 40);
    private GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP);
    private JPanel backingPanel = new JPanel(gridlayout);
    private static JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS];
    
    private static boolean isBlacksTurn;
    private static boolean isWhitesTurn;
    
    boolean validPieceSelected = false;
    
    public GUI() {
        backingPanel.setSize(LAYERED_PANE_SIZE);
        backingPanel.setLocation(2 * GAP, 2 * GAP);
        backingPanel.setBackground(Color.gray);
        
        int k=0;
        for (int row = 0; row < GRID_ROWS; row++) {
            for (int col = 0; col < GRID_COLS; col++) {
                panelGrid[row][col] = new JPanel(new GridBagLayout());
                backingPanel.add(panelGrid[row][col]);
                if (row==0 || row==2 || row==4 || row==6){
                	if (col%2==0) panelGrid[row][col].setBackground(Color.white);
                	else panelGrid[row][col].setBackground(Color.gray);
                }
                else{
                	if (col%2==0) panelGrid[row][col].setBackground(Color.gray);
                	else panelGrid[row][col].setBackground(Color.white);
                }
                k++;
            }
        }
        
        backingPanel.setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));
        setPreferredSize(LAYERED_PANE_SIZE);
        add(backingPanel, JLayeredPane.DEFAULT_LAYER);
        MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
        addMouseListener(myMouseAdapter);
        addMouseMotionListener(myMouseAdapter);
    }

    private class MyMouseAdapter extends MouseAdapter {
        private JLabel dragLabel = null;
        private int dragLabelWidthDiv2;
        private int dragLabelHeightDiv2;
        private JPanel clickedPanel = null;
        
        @Override
        public void mouseClicked(MouseEvent me){
            //if a piece has not already been selected in this turn, select this piece
        	//and display it's possible moves if it's a piece owned by the player with the current turn
            clickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
            Component[] components = clickedPanel.getComponents();
        	
            int[][] indexArray = new int[8][8];
            BoardCell clickedCell;
            for (int i=0; i<8; i++){
            	for (int k=0; k<8; k++){
            		if (panelGrid[i][k].equals(clickedPanel)) break;
            		else {
            			indexArray[i][k] = 1;
            			clickedCell = new BoardCell(i,k);
            			System.out.println(clickedCell.getRow()+" "+clickedCell.getCol());
            		}
            	}
            }
            
        	//if a piece has already been selected and this boardcell is a possible move for that piece, move
        	//the piece to this clicked boardcell
        }

        @Override
        public void mousePressed(MouseEvent me) {
            clickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
            Component[] components = clickedPanel.getComponents(); 
            if (components.length == 0) {
                return;
            }
            // if we click on jpanel that holds a jlabel
            if (components[0] instanceof JLabel) {

                // remove label from panel
                dragLabel = (JLabel) components[0];
                clickedPanel.remove(dragLabel);
                clickedPanel.revalidate();
                clickedPanel.repaint();

                dragLabelWidthDiv2 = dragLabel.getWidth() / 2;
                dragLabelHeightDiv2 = dragLabel.getHeight() / 2;

                int x = me.getPoint().x - dragLabelWidthDiv2;
                int y = me.getPoint().y - dragLabelHeightDiv2;
                dragLabel.setLocation(x, y);
                add(dragLabel, JLayeredPane.DRAG_LAYER);
                repaint();
            }
        }

        @Override
        public void mouseDragged(MouseEvent me) {
            if (dragLabel == null) {
                return;
            }
            int x = me.getPoint().x - dragLabelWidthDiv2;
            int y = me.getPoint().y - dragLabelHeightDiv2;
            dragLabel.setLocation(x, y);
            repaint();
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            if (dragLabel == null) {
                return;
            }
            remove(dragLabel); // remove dragLabel for drag layer of JLayeredPane
            JPanel droppedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
            if (droppedPanel == null) {
                // if off the grid, return label to home
                clickedPanel.add(dragLabel);
                clickedPanel.revalidate();
            } else {
                int r = -1;
                int c = -1;
                searchPanelGrid: for (int row = 0; row < panelGrid.length; row++) {
                    for (int col = 0; col < panelGrid[row].length; col++) {
                        if (panelGrid[row][col] == droppedPanel) {
                            r = row;
                            c = col;
                            break searchPanelGrid;
                        }
                    }
                }

                if (r == -1 || c == -1) {
                    // if off the grid, return label to home
                    clickedPanel.add(dragLabel);
                    clickedPanel.revalidate();
                } else {
                	Component[] theseComponents = droppedPanel.getComponents();
                	if (theseComponents.length != 0){
                		clickedPanel.add(dragLabel);
                		clickedPanel.revalidate();
                	} else{
                		droppedPanel.add(dragLabel);
                        droppedPanel.revalidate();
                	}
                }
            }

            repaint();
            dragLabel = null;
        }
    }
    
    public static void loadDataToBoardUI(Board b){
    	int k = 0;
    	for (String[] x : b.getBoard()){
    		for (String p : x){
				BoardCell translated = BoardCell.translate(k);
    			if (p.equals("b_c")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackCastle());
    			}
    			if (p.equals("b_h")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackHorse());
    			}
    			if (p.equals("b_b")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackBishop());
    			}
    			if (p.equals("b_q")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackQueen());
    			}
    			if (p.equals("b_k")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackKing());
    			}
    			if (p.equals("b_p")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new BlackPawn());
    			}
    			if (p.equals("w_p")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhitePawn());
    			}
    			if (p.equals("w_c")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhiteCastle());
    			}
    			if (p.equals("w_h")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhiteHorse());
    			}
    			if (p.equals("w_b")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhiteBishop());
    			}
    			if (p.equals("w_q")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhiteQueen());
    			}
    			if (p.equals("w_k")){
    				panelGrid[translated.getRow()][translated.getCol()].add(new WhiteKing());
    			}
    			k++;
    		}
    	}
    	
    }

    public static void createAndShowUI() {
        JFrame frame = new JFrame("Chess");
        frame.getContentPane().add(new GUI());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
